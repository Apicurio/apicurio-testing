name: 'Restore Cluster State'
description: 'Restores the clusters directory from the apicurio-testing-cache repository'
inputs:
  github-token:
    description: 'GitHub access token for API calls and accessing the cache repository'
    required: true
runs:
  using: 'composite'
  steps:
    - name: Restore cluster state
      shell: bash
      run: |
        WORK_DIR=".work"
        NAME="cache-for-restore-cluster-state"
        CACHE_DIR="$WORK_DIR/$NAME"

        # Clone the cache repository
        rm -rf $CACHE_DIR
        git clone https://${{ inputs.github-token }}@github.com/Apicurio/apicurio-testing-cache.git $CACHE_DIR
        
        # Look for the cluster state in the cache repository
        RUN_DIR="$CACHE_DIR/runs/${{ github.run_id }}"
        CLUSTERS_ZIP="$RUN_DIR/clusters.zip"
        CURRENT_DIR="$CACHE_DIR/runs/current"
        CURRENT_CLUSTERS_ZIP="$CURRENT_DIR/clusters.zip"
        
        if [ -f "$CLUSTERS_ZIP" ]; then
          echo "Found cluster state: $CLUSTERS_ZIP"
          SELECTED_ZIP="$CLUSTERS_ZIP"
        elif [ -f "$CURRENT_CLUSTERS_ZIP" ]; then
          echo "Cluster state not found for run ID ${{ github.run_id }}, using fallback: $CURRENT_CLUSTERS_ZIP"
          SELECTED_ZIP="$CURRENT_CLUSTERS_ZIP"
        else
          if [ -f "$RUN_DIR/no-clusters-found.txt" ]; then
            echo "No cluster state was saved for run ID ${{ github.run_id }} (no-clusters-found.txt found)"
            exit 1
          else
            echo "Error: No cluster state found for run ID ${{ github.run_id }}"
            echo "Expected to find: $CLUSTERS_ZIP"
            echo "Also looked for fallback: $CURRENT_CLUSTERS_ZIP"
            echo "Available runs in cache:"
            ls -la $CACHE_DIR/runs/ 2>/dev/null || echo "No runs directory found"
            exit 1
          fi
        fi
        
        # Remove existing clusters directory if it exists
        if [ -d "clusters" ]; then
          echo "Removing existing clusters directory"
          rm -rf clusters
        fi
        
        # Extract the clusters.zip file
        echo "Extracting cluster state..."
        unzip -q "$SELECTED_ZIP"
        
        if [ -d "clusters" ]; then
          echo "Cluster state successfully restored"
          echo "Contents of clusters directory:"
          find clusters/
        else
          echo "Error: Failed to extract clusters directory"
          exit 1
        fi

        rm -rf $CACHE_DIR
