name: Test Apicurio Registry Release
on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: Released version to test
        required: true
      operatorImage:
        description: Operator image to test (optional)
        required: false
      appImage:
        description: Application image to test (optional)
        required: false
      uiImage:
        description: UI image to test (optional)
        required: false
      testsTag:
        description: git tag to use for running tests
        required: true
        default: main
      isDownstream:
        description: Test downstream images
        required: true
        default: false
      skipClusterInstall:
        description: Skip cluster install
        required: true
        default: false
      dryRun:
        description: Dry run mode - skip committing results to apicurio-testing-results
        required: false
        default: ''
  workflow_call:
    inputs:
      releaseVersion:
        description: Released version to test
        required: true
        type: string
      operatorImage:
        description: Operator image to test (optional)
        required: false
        type: string
      appImage:
        description: Application image to test (optional)
        required: false
        type: string
      uiImage:
        description: UI image to test (optional)
        required: false
        type: string
      testsTag:
        description: git tag to use for running tests
        required: false
        type: string
        default: main
      isDownstream:
        description: Test downstream images
        required: false
        type: string
        default: 'false'
      skipClusterInstall:
        description: Skip cluster install
        required: false
        type: string
        default: 'false'
      dryRun:
        description: Dry run mode - skip committing results to apicurio-testing-results
        required: false
        type: string
        default: ''
    outputs:
      run-id:
        description: The GitHub run ID for this workflow execution
        value: ${{ jobs.initialize-globals.outputs.run-id }}
      run-date:
        description: The date of this workflow execution (YYYY-MM-DD)
        value: ${{ jobs.initialize-globals.outputs.run-date }}
    secrets:
      ACCESS_TOKEN:
        required: true
      OPENSHIFT_PULL_SECRET:
        required: true
      SSH_PUBLIC_KEY:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      DOCKER_SERVER:
        required: true
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      DOCKER_EMAIL:
        required: true

jobs:
  initialize-globals:
    runs-on: ubuntu-latest
    outputs:
      start-time: ${{ steps.get-start-time.outputs.start-time }}
      run-id: ${{ steps.get-start-time.outputs.run-id }}
      run-date: ${{ steps.get-start-time.outputs.run-date }}
      all-inputs: ${{ steps.collect-inputs.outputs.all-inputs }}
    steps:
      - name: Collect all inputs
        id: collect-inputs
        run: |
          echo "Workflow Inputs:"
          echo "  releaseVersion: ${{ inputs.releaseVersion }}"
          echo "  operatorImage: ${{ inputs.operatorImage }}"
          echo "  appImage: ${{ inputs.appImage }}"
          echo "  uiImage: ${{ inputs.uiImage }}"
          echo "  testsTag: ${{ inputs.testsTag }}"
          echo "  isDownstream: ${{ inputs.isDownstream }}"
          echo "  skipClusterInstall: ${{ inputs.skipClusterInstall }}"
          echo "  dryRun: ${{ inputs.dryRun }}"

          # Create JSON representation of all inputs
          INPUTS_JSON=$(cat <<'EOF'
          {
            "releaseVersion": "${{ inputs.releaseVersion }}",
            "operatorImage": "${{ inputs.operatorImage }}",
            "appImage": "${{ inputs.appImage }}",
            "uiImage": "${{ inputs.uiImage }}",
            "testsTag": "${{ inputs.testsTag }}",
            "isDownstream": "${{ inputs.isDownstream }}",
            "skipClusterInstall": "${{ inputs.skipClusterInstall }}",
            "dryRun": "${{ inputs.dryRun }}"
          }
          EOF
          )
          echo "Inputs as JSON:"
          echo "$INPUTS_JSON" | jq .

          # Set as output (compact JSON for single-line output)
          echo "all-inputs=$(echo "$INPUTS_JSON" | jq -c .)" >> $GITHUB_OUTPUT

      - name: Get Workflow Start Time
        id: get-start-time
        run: |
          START_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          echo "start-time=$START_TIME" >> $GITHUB_OUTPUT
          echo "Workflow start time: $START_TIME"

          # Capture run ID and date for report URL generation
          echo "run-id=${{ github.run_id }}" >> $GITHUB_OUTPUT
          echo "run-date=$(date -u +%Y-%m-%d)" >> $GITHUB_OUTPUT

  os419:
    name: OpenShift 4.19
    runs-on: ubuntu-latest
    timeout-minutes: 90

    env:
      OPENSHIFT_PULL_SECRET: ${{ secrets.OPENSHIFT_PULL_SECRET }}
      SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: "us-east-1"
      OPENSHIFT_VERSION: "4.19"
      CLUSTER_NAME: ci419
      APICURIO_REGISTRY_VERSION: ${{ inputs.releaseVersion }}
      CONTROL_PLANE_NODES: 3
      COMPUTE_NODES: 3 # TODO: Increase if needed.
      OPERATOR_IMAGE: ${{ inputs.operatorImage }}
      APP_IMAGE: ${{ inputs.appImage }}
      UI_IMAGE: ${{ inputs.uiImage }}
      DOCKER_SERVER: ${{ secrets.DOCKER_SERVER }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_EMAIL: ${{ secrets.DOCKER_EMAIL }}

    steps:
      - name: Check Required tools
        run: |
          curl --version
          jq --version
          git --version

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config user.name "apicurio-ci"
          git config user.email "apicurio.ci@gmail.com"
          git config pull.rebase true

      - name: Load test cache
        run: |
          ./load-cache.sh --token "${{ secrets.ACCESS_TOKEN }}"

      - name: Install OpenShift cluster
        if: ${{ inputs.skipClusterInstall != 'true' }}
        run: |
          ./install-cluster.sh --cluster $CLUSTER_NAME \
              --okdVersion $OPENSHIFT_VERSION \
              --controlPlaneNodes $CONTROL_PLANE_NODES \
              --computeNodes $COMPUTE_NODES \
              --log-level warn

      - name: Restore cluster state
        if: ${{ inputs.skipClusterInstall == 'true' }}
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Install OpenShift Docker Pull Credentials
        run: |
          ./configure-pull-secret.sh --cluster $CLUSTER_NAME

      - name: Install Apicurio Registry Operator
        run: |
          ./install-apicurio-operator.sh --cluster $CLUSTER_NAME \
              --version $APICURIO_REGISTRY_VERSION \
              --operatorImage "$OPERATOR_IMAGE" \
              --appImage "$APP_IMAGE" \
              --uiImage "$UI_IMAGE"

      - name: Save cluster state
        if: ${{ inputs.skipClusterInstall != 'true' && always() }}
        uses: ./.github/actions/save-cluster-state

  os419_inmemory:
    name: Apicurio Registry (in-memory)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: os419

    env:
      CLUSTER_NAME: ci419
      NAMESPACE: inmemory
      PROFILE: inmemory
      DOCKER_SERVER: ${{ secrets.DOCKER_SERVER }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_EMAIL: ${{ secrets.DOCKER_EMAIL }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Verify kubectl
        run: kubectl version --client

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Install Apicurio Registry
        run: |
          ./install-apicurio-registry.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE --profile $PROFILE

      - name: Commit pod logs to repository
        if: always()
        uses: ./.github/actions/commit-pod-logs
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}


  os419_pg17:
    name: Apicurio Registry (pg 17)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: os419
    if: always()

    env:
      CLUSTER_NAME: ci419
      NAMESPACE: pg17
      PROFILE: postgresql
      POSTGRESQL_VERSION: 17
      DOCKER_SERVER: ${{ secrets.DOCKER_SERVER }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_EMAIL: ${{ secrets.DOCKER_EMAIL }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Verify kubectl
        run: kubectl version --client

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Install Apicurio Registry
        run: |
          ./install-apicurio-registry.sh --cluster $CLUSTER_NAME \
              --namespace $NAMESPACE \
              --profile $PROFILE \
              --postgresqlVersion $POSTGRESQL_VERSION

      - name: Commit pod logs to repository
        if: failure()
        uses: ./.github/actions/commit-pod-logs
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}


  os419_pg12:
    name: Apicurio Registry (pg12)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: os419
    if: always()

    env:
      CLUSTER_NAME: ci419
      NAMESPACE: pg12
      PROFILE: postgresql
      POSTGRESQL_VERSION: 12
      DOCKER_SERVER: ${{ secrets.DOCKER_SERVER }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_EMAIL: ${{ secrets.DOCKER_EMAIL }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Verify kubectl
        run: kubectl version --client

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Install Apicurio Registry
        run: |
          ./install-apicurio-registry.sh --cluster $CLUSTER_NAME \
              --namespace $NAMESPACE \
              --profile $PROFILE \
              --postgresqlVersion $POSTGRESQL_VERSION

      - name: Commit pod logs to repository
        if: failure()
        uses: ./.github/actions/commit-pod-logs
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}


  os419_mysql:
    name: Apicurio Registry (mysql)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: os419
    if: always()

    env:
      CLUSTER_NAME: ci419
      NAMESPACE: mysql
      PROFILE: mysql
      DOCKER_SERVER: ${{ secrets.DOCKER_SERVER }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_EMAIL: ${{ secrets.DOCKER_EMAIL }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Verify kubectl
        run: kubectl version --client

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Install Apicurio Registry
        run: |
          ./install-apicurio-registry.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE --profile $PROFILE

      - name: Commit pod logs to repository
        if: failure()
        uses: ./.github/actions/commit-pod-logs
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}


  os419_strimzi047:
    name: Apicurio Registry (strimzi 0.47)
    runs-on: ubuntu-latest
    timeout-minutes: 40
    needs: os419
    if: always()

    env:
      CLUSTER_NAME: ci419
      NAMESPACE: ksql047
      PROFILE: kafkasql
      STRIMZI_VERSION: 0.47.0
      DOCKER_SERVER: ${{ secrets.DOCKER_SERVER }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_EMAIL: ${{ secrets.DOCKER_EMAIL }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Verify kubectl
        run: kubectl version --client

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Install Strimzi Operator
        run: |
          ./install-strimzi.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE --version $STRIMZI_VERSION

      - name: Install Kafka Cluster
        run: |
          ./install-kafka.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE

      - name: Install Apicurio Registry
        run: |
          ./install-apicurio-registry.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE --profile $PROFILE

      - name: Commit pod logs to repository
        if: failure()
        uses: ./.github/actions/commit-pod-logs
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}


  os419_authn:
    name: Apicurio Registry (authn)
    runs-on: ubuntu-latest
    timeout-minutes: 40
    needs: os419
    if: always()
    
    env:
      CLUSTER_NAME: ci419
      NAMESPACE: authn
      PROFILE: authn
      KEYCLOAK_VERSION: 26.3.1
      DOCKER_SERVER: ${{ secrets.DOCKER_SERVER }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_EMAIL: ${{ secrets.DOCKER_EMAIL }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Verify kubectl
        run: kubectl version --client

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Install Keycloak Operator
        run: |
          ./install-keycloak-operator.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE

      - name: Install Keycloak
        run: |
          ./install-keycloak.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE

      - name: Install Apicurio Registry
        run: |
          ./install-apicurio-registry.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE --profile $PROFILE

      - name: Commit pod logs to repository
        if: failure()
        uses: ./.github/actions/commit-pod-logs
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}


  os419_inmemory_uitests:
    name: UI Tests (in mem)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: os419_inmemory

    env:
      CLUSTER_NAME: ci419
      NAMESPACE: inmemory
      APICURIO_REGISTRY_VERSION: ${{ inputs.releaseVersion }}
      IS_DOWNSTREAM_VERSION: ${{ inputs.isDownstream }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Run UI Tests
        run: |
          ./run-ui-tests.sh --cluster $CLUSTER_NAME \
              --namespace $NAMESPACE \
              --isDownstream $IS_DOWNSTREAM_VERSION \
              --tag ${{ inputs.testsTag }}

      - name: Commit UI test results to repository
        if: always()
        uses: ./.github/actions/commit-ui-test-results
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Commit pod logs to repository
        if: failure()
        uses: ./.github/actions/commit-pod-logs
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}


  os419_inmemory_integrationtests:
    name: Integration Tests (in mem)
    runs-on: ubuntu-latest
    timeout-minutes: 40
    needs: os419_inmemory_uitests

    env:
      CLUSTER_NAME: ci419
      NAMESPACE: inmemory
      APICURIO_REGISTRY_VERSION: ${{ inputs.releaseVersion }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Run Integration Tests
        run: |
          ./run-integration-tests.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE --tag ${{ inputs.testsTag }}

      - name: Commit integration test results to repository
        if: always()
        uses: ./.github/actions/commit-integration-test-results
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Commit pod logs to repository
        if: failure()
        uses: ./.github/actions/commit-pod-logs
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}


  os419_inmemory_dastscan:
    name: DAST Scan (in mem)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: os419_inmemory_integrationtests

    env:
      CLUSTER_NAME: ci419
      NAMESPACE: inmemory
      RAPIDAST_TAG: development

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Run DAST Scanner (v3)
        run: |
          ./run-dast-scan.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE --config registry_v3_unauthenticated.yaml --tag $RAPIDAST_TAG

      - name: Commit DAST scan results to repository
        uses: ./.github/actions/commit-dast-scan-results
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          subdirectory-name: registry-v3-unauthenticated
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Run DAST Scanner (v2)
        run: |
          ./run-dast-scan.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE --config registry_v2_unauthenticated.yaml --tag $RAPIDAST_TAG

      - name: Commit DAST scan results to repository
        uses: ./.github/actions/commit-dast-scan-results
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          subdirectory-name: registry-v2-unauthenticated
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Run DAST Scanner (ccompat v7)
        run: |
          ./run-dast-scan.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE --config ccompat_v7_unauthenticated.yaml --tag $RAPIDAST_TAG

      - name: Commit DAST scan results to repository
        uses: ./.github/actions/commit-dast-scan-results
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          subdirectory-name: ccompat-v7-unauthenticated
          github-token: ${{ secrets.ACCESS_TOKEN }}


  os419_pg17_uitests:
    name: UI Tests (pg17)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: os419_pg17

    env:
      CLUSTER_NAME: ci419
      NAMESPACE: pg17
      APICURIO_REGISTRY_VERSION: ${{ inputs.releaseVersion }}
      IS_DOWNSTREAM_VERSION: ${{ inputs.isDownstream }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Run UI Tests
        run: |
          ./run-ui-tests.sh --cluster $CLUSTER_NAME \
              --namespace $NAMESPACE \
              --isDownstream $IS_DOWNSTREAM_VERSION \
              --tag ${{ inputs.testsTag }}

      - name: Commit UI test results to repository
        if: always()
        uses: ./.github/actions/commit-ui-test-results
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Commit pod logs to repository
        if: failure()
        uses: ./.github/actions/commit-pod-logs
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}


  os419_pg17_integrationtests:
    name: Integration Tests (pg17)
    runs-on: ubuntu-latest
    timeout-minutes: 40
    needs: os419_pg17_uitests

    env:
      CLUSTER_NAME: ci419
      NAMESPACE: pg17
      APICURIO_REGISTRY_VERSION: ${{ inputs.releaseVersion }}
      TEST_PROFILE: all

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Run Integration Tests
        run: |
          ./run-integration-tests.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE --tag ${{ inputs.testsTag }} --testProfile $TEST_PROFILE

      - name: Commit integration test results to repository
        if: always()
        uses: ./.github/actions/commit-integration-test-results
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Commit pod logs to repository
        if: failure()
        uses: ./.github/actions/commit-pod-logs
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}


  os419_pg12_integrationtests:
    name: Integration Tests (pg12)
    runs-on: ubuntu-latest
    timeout-minutes: 40
    needs: os419_pg12

    env:
      CLUSTER_NAME: ci419
      NAMESPACE: pg12
      APICURIO_REGISTRY_VERSION: ${{ inputs.releaseVersion }}
      TEST_PROFILE: smoke

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Run Integration Tests
        run: |
          ./run-integration-tests.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE --tag ${{ inputs.testsTag }} --testProfile $TEST_PROFILE

      - name: Commit integration test results to repository
        if: always()
        uses: ./.github/actions/commit-integration-test-results
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Commit pod logs to repository
        if: failure()
        uses: ./.github/actions/commit-pod-logs
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}


  os419_mysql_uitests:
    name: UI Tests (mysql)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: os419_mysql

    env:
      CLUSTER_NAME: ci419
      NAMESPACE: mysql
      APICURIO_REGISTRY_VERSION: ${{ inputs.releaseVersion }}
      IS_DOWNSTREAM_VERSION: ${{ inputs.isDownstream }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Run UI Tests
        run: |
          ./run-ui-tests.sh --cluster $CLUSTER_NAME \
              --namespace $NAMESPACE \
              --isDownstream $IS_DOWNSTREAM_VERSION \
              --tag ${{ inputs.testsTag }}

      - name: Commit UI test results to repository
        if: always()
        uses: ./.github/actions/commit-ui-test-results
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Commit pod logs to repository
        if: failure()
        uses: ./.github/actions/commit-pod-logs
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}


  os419_mysql_integrationtests:
    name: Integration Tests (mysql)
    runs-on: ubuntu-latest
    timeout-minutes: 40
    needs: os419_mysql_uitests

    env:
      CLUSTER_NAME: ci419
      NAMESPACE: mysql
      APICURIO_REGISTRY_VERSION: ${{ inputs.releaseVersion }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Run Integration Tests
        run: |
          ./run-integration-tests.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE --tag ${{ inputs.testsTag }}

      - name: Commit integration test results to repository
        if: always()
        uses: ./.github/actions/commit-integration-test-results
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Commit pod logs to repository
        if: failure()
        uses: ./.github/actions/commit-pod-logs
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}


  os419_strimzi047_uitests:
    name: UI Tests (strimzi 0.47)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: os419_strimzi047

    env:
      CLUSTER_NAME: ci419
      NAMESPACE: ksql047
      APICURIO_REGISTRY_VERSION: ${{ inputs.releaseVersion }}
      IS_DOWNSTREAM_VERSION: ${{ inputs.isDownstream }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Run UI Tests
        run: |
          ./run-ui-tests.sh --cluster $CLUSTER_NAME \
              --namespace $NAMESPACE \
              --isDownstream $IS_DOWNSTREAM_VERSION \
              --tag ${{ inputs.testsTag }}

      - name: Commit UI test results to repository
        if: always()
        uses: ./.github/actions/commit-ui-test-results
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Commit pod logs to repository
        if: failure()
        uses: ./.github/actions/commit-pod-logs
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}


  os419_strimzi047_integrationtests:
    name: Integration Tests (strimzi 0.47)
    runs-on: ubuntu-latest
    timeout-minutes: 40
    needs: os419_strimzi047_uitests

    env:
      CLUSTER_NAME: ci419
      NAMESPACE: ksql047
      APICURIO_REGISTRY_VERSION: ${{ inputs.releaseVersion }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Run Integration Tests
        run: |
          ./run-integration-tests.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE --tag ${{ inputs.testsTag }}

      - name: Commit integration test results to repository
        if: always()
        uses: ./.github/actions/commit-integration-test-results
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Commit pod logs to repository
        if: failure()
        uses: ./.github/actions/commit-pod-logs
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}


  os419_authn_integrationtests:
    name: Integration Tests (authn)
    runs-on: ubuntu-latest
    timeout-minutes: 40
    needs: os419_authn

    env:
      CLUSTER_NAME: ci419
      NAMESPACE: authn
      APICURIO_REGISTRY_VERSION: ${{ inputs.releaseVersion }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Run Integration Tests
        run: |
          ./run-integration-tests.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE --tag ${{ inputs.testsTag }} --testProfile auth --registryProtocol https --registryPort 443

      - name: Commit integration test results to repository
        if: always()
        uses: ./.github/actions/commit-integration-test-results
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Commit pod logs to repository
        if: failure()
        uses: ./.github/actions/commit-pod-logs
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}


  os419_authn_dastscan:
    name: DAST Scan (authn)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: os419_authn_integrationtests

    env:
      CLUSTER_NAME: ci419
      NAMESPACE: authn
      RAPIDAST_TAG: development

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Run DAST Scanner (v3)
        run: |
          ./run-dast-scan.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE --config registry_v3_authenticated.yaml --tag $RAPIDAST_TAG --authEnabled true

      - name: Commit DAST scan results to repository
        uses: ./.github/actions/commit-dast-scan-results
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          subdirectory-name: registry-v3-authenticated
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Run DAST Scanner (v2)
        run: |
          ./run-dast-scan.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE --config registry_v2_authenticated.yaml --tag $RAPIDAST_TAG --authEnabled true

      - name: Commit DAST scan results to repository
        uses: ./.github/actions/commit-dast-scan-results
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          subdirectory-name: registry-v2-authenticated
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Run DAST Scanner (ccompat v7)
        run: |
          ./run-dast-scan.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE --config ccompat_v7_authenticated.yaml --tag $RAPIDAST_TAG --authEnabled true

      - name: Commit DAST scan results to repository
        uses: ./.github/actions/commit-dast-scan-results
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          subdirectory-name: ccompat-v7-authenticated
          github-token: ${{ secrets.ACCESS_TOKEN }}


  os419_inmemory_teardown:
    name: Destroy Registry (inmemory)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - os419_inmemory_uitests
      - os419_inmemory_integrationtests
      - os419_inmemory_dastscan
    if: always()

    env:
      CLUSTER_NAME: ci419
      NAMESPACE: inmemory

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Destroy Namespace
        run: |
          ./destroy-namespace.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE


  os419_pg17_teardown:
    name: Destroy Registry (pg17)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - os419_pg17_uitests
      - os419_pg17_integrationtests
    if: always()

    env:
      CLUSTER_NAME: ci419
      NAMESPACE: pg17

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Destroy Namespace
        run: |
          ./destroy-namespace.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE


  os419_pg12_teardown:
    name: Destroy Registry (pg12)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - os419_pg12_integrationtests
    if: always()

    env:
      CLUSTER_NAME: ci419
      NAMESPACE: pg12

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Destroy Namespace
        run: |
          ./destroy-namespace.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE


  os419_mysql_teardown:
    name: Destroy Registry (mysql)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - os419_mysql_uitests
      - os419_mysql_integrationtests
    if: always()

    env:
      CLUSTER_NAME: ci419
      NAMESPACE: mysql

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Destroy Namespace
        run: |
          ./destroy-namespace.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE


  os419_strimzi047_teardown:
    name: Destroy Registry (strimzi 0.47)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - os419_strimzi047_uitests
      - os419_strimzi047_integrationtests
    if: always()

    env:
      CLUSTER_NAME: ci419
      NAMESPACE: ksql047

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Destroy Namespace
        run: |
          ./destroy-namespace.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE


  os419_authn_teardown:
    name: Destroy Registry (authn)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - os419_authn_integrationtests
      - os419_authn_dastscan
    if: always()

    env:
      CLUSTER_NAME: ci419
      NAMESPACE: authn

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Destroy Namespace
        run: |
          ./destroy-namespace.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE


  os419_teardown:
    name: Destroy OpenShift 4.19
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs:
      - initialize-globals
      - os419_inmemory_teardown
      - os419_pg17_teardown
      - os419_pg12_teardown
      - os419_mysql_teardown
      - os419_strimzi047_teardown
      - os419_authn_teardown
    if: always()

    env:
      OPENSHIFT_PULL_SECRET: ${{ secrets.OPENSHIFT_PULL_SECRET }}
      SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: "us-east-1"
      CLUSTER_NAME: ci419

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Destroy OpenShift cluster
        if: ${{ inputs.skipClusterInstall != 'true' }}
        run: |
          ./destroy-cluster.sh --cluster $CLUSTER_NAME

      - name: Cleanup cluster state
        if: ${{ inputs.skipClusterInstall != 'true' }}
        uses: ./.github/actions/cleanup-cluster-state

  os414:
    name: OpenShift 4.14
    runs-on: ubuntu-latest
    timeout-minutes: 90
    if: ${{ inputs.skipClusterInstall != 'true' }}

    env:
      OPENSHIFT_PULL_SECRET: ${{ secrets.OPENSHIFT_PULL_SECRET }}
      SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: "us-east-1"
      OPENSHIFT_VERSION: "4.14"
      CLUSTER_NAME: ci414
      APICURIO_REGISTRY_VERSION: ${{ inputs.releaseVersion }}
      CONTROL_PLANE_NODES: 3
      COMPUTE_NODES: 3
      OPERATOR_IMAGE: ${{ inputs.operatorImage }}
      APP_IMAGE: ${{ inputs.appImage }}
      UI_IMAGE: ${{ inputs.uiImage }}
      DOCKER_SERVER: ${{ secrets.DOCKER_SERVER }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_EMAIL: ${{ secrets.DOCKER_EMAIL }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config user.name "apicurio-ci"
          git config user.email "apicurio.ci@gmail.com"
          git config pull.rebase true

      - name: Load test cache
        run: |
          ./load-cache.sh --token "${{ secrets.ACCESS_TOKEN }}"

      - name: Install OpenShift cluster
        run: |
          ./install-cluster.sh --cluster $CLUSTER_NAME --okdVersion $OPENSHIFT_VERSION --controlPlaneNodes $CONTROL_PLANE_NODES --computeNodes $COMPUTE_NODES --log-level warn

      - name: Install OpenShift Docker Pull Credentials
        run: |
          ./configure-pull-secret.sh --cluster $CLUSTER_NAME

      - name: Install Apicurio Registry Operator
        run: |
          ./install-apicurio-operator.sh --cluster $CLUSTER_NAME \
              --version $APICURIO_REGISTRY_VERSION \
              --operatorImage "$OPERATOR_IMAGE" \
              --appImage "$APP_IMAGE" \
              --uiImage "$UI_IMAGE"

      - name: Save cluster state
        if: always()
        uses: ./.github/actions/save-cluster-state

  os414_inmemory:
    name: Apicurio Registry (in-memory) [4.14]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: os414

    env:
      CLUSTER_NAME: ci414
      NAMESPACE: inmemory
      PROFILE: inmemory
      DOCKER_SERVER: ${{ secrets.DOCKER_SERVER }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_EMAIL: ${{ secrets.DOCKER_EMAIL }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Verify kubectl
        run: kubectl version --client

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Install Apicurio Registry
        run: |
          ./install-apicurio-registry.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE --profile $PROFILE

      - name: Commit pod logs to repository
        if: always()
        uses: ./.github/actions/commit-pod-logs
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}


  os414_inmemory_uitests:
    name: UI Tests (in mem) [4.14]
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: os414_inmemory

    env:
      CLUSTER_NAME: ci414
      NAMESPACE: inmemory
      APICURIO_REGISTRY_VERSION: ${{ inputs.releaseVersion }}
      IS_DOWNSTREAM_VERSION: ${{ inputs.isDownstream }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Run UI Tests
        run: |
          ./run-ui-tests.sh --cluster $CLUSTER_NAME \
              --namespace $NAMESPACE \
              --isDownstream $IS_DOWNSTREAM_VERSION \
              --tag ${{ inputs.testsTag }}

      - name: Commit UI test results to repository
        if: always()
        uses: ./.github/actions/commit-ui-test-results
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Commit pod logs to repository
        if: failure()
        uses: ./.github/actions/commit-pod-logs
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}


  os414_inmemory_integrationtests:
    name: Integration Tests (in mem) [4.14]
    runs-on: ubuntu-latest
    timeout-minutes: 40
    needs: os414_inmemory_uitests

    env:
      CLUSTER_NAME: ci414
      NAMESPACE: inmemory
      APICURIO_REGISTRY_VERSION: ${{ inputs.releaseVersion }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Run Integration Tests
        run: |
          ./run-integration-tests.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE --tag ${{ inputs.testsTag }}

      - name: Commit integration test results to repository
        if: always()
        uses: ./.github/actions/commit-integration-test-results
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Commit pod logs to repository
        if: failure()
        uses: ./.github/actions/commit-pod-logs
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}


  os414_inmemory_teardown:
    name: Destroy Registry (inmemory) [4.14]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - os414_inmemory_uitests
      - os414_inmemory_integrationtests

    env:
      CLUSTER_NAME: ci414
      NAMESPACE: inmemory

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Destroy Namespace
        run: |
          ./destroy-namespace.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE


  os414_strimzi043:
    name: Apicurio Registry (strimzi 0.43)
    runs-on: ubuntu-latest
    timeout-minutes: 40
    needs: os414
    if: always()

    env:
      CLUSTER_NAME: ci414
      NAMESPACE: ksql043
      PROFILE: kafkasql
      STRIMZI_VERSION: 0.43.0
      DOCKER_SERVER: ${{ secrets.DOCKER_SERVER }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_EMAIL: ${{ secrets.DOCKER_EMAIL }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Verify kubectl
        run: kubectl version --client

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Install Strimzi Operator
        run: |
          ./install-strimzi.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE --version $STRIMZI_VERSION

      - name: Install Kafka Cluster
        run: |
          ./install-kafka.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE

      - name: Install Apicurio Registry
        run: |
          ./install-apicurio-registry.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE --profile $PROFILE

      - name: Commit pod logs to repository
        if: failure()
        uses: ./.github/actions/commit-pod-logs
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}


  os414_strimzi043_uitests:
    name: UI Tests (strimzi 0.43)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: os414_strimzi043

    env:
      CLUSTER_NAME: ci414
      NAMESPACE: ksql043
      APICURIO_REGISTRY_VERSION: ${{ inputs.releaseVersion }}
      IS_DOWNSTREAM_VERSION: ${{ inputs.isDownstream }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Run UI Tests
        run: |
          ./run-ui-tests.sh --cluster $CLUSTER_NAME \
              --namespace $NAMESPACE \
              --isDownstream $IS_DOWNSTREAM_VERSION \
              --tag ${{ inputs.testsTag }}

      - name: Commit UI test results to repository
        if: always()
        uses: ./.github/actions/commit-ui-test-results
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Commit pod logs to repository
        if: failure()
        uses: ./.github/actions/commit-pod-logs
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}


  os414_strimzi043_integrationtests:
    name: Integration Tests (strimzi 0.43)
    runs-on: ubuntu-latest
    timeout-minutes: 40
    needs: os414_strimzi043_uitests

    env:
      CLUSTER_NAME: ci414
      NAMESPACE: ksql043
      APICURIO_REGISTRY_VERSION: ${{ inputs.releaseVersion }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Run Integration Tests
        run: |
          ./run-integration-tests.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE --tag ${{ inputs.testsTag }}

      - name: Commit integration test results to repository
        if: always()
        uses: ./.github/actions/commit-integration-test-results
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Commit pod logs to repository
        if: failure()
        uses: ./.github/actions/commit-pod-logs
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ env.NAMESPACE }}
          job-name: ${{ github.job }}
          github-token: ${{ secrets.ACCESS_TOKEN }}


  os414_strimzi043_teardown:
    name: Destroy Registry (strimzi 0.43)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - os414_strimzi043_uitests
      - os414_strimzi043_integrationtests
    if: always()

    env:
      CLUSTER_NAME: ci414
      NAMESPACE: ksql043

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Destroy Namespace
        run: |
          ./destroy-namespace.sh --cluster $CLUSTER_NAME --namespace $NAMESPACE


  os414_teardown:
    name: Destroy OpenShift 4.14
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs:
      - initialize-globals
      - os414_inmemory_teardown
      - os414_strimzi043_teardown
    if: always()

    env:
      OPENSHIFT_PULL_SECRET: ${{ secrets.OPENSHIFT_PULL_SECRET }}
      SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: "us-east-1"
      CLUSTER_NAME: ci414

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore cluster state
        if: always()
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Destroy OpenShift cluster
        if: ${{ inputs.skipClusterInstall != 'true' }}
        run: |
          ./destroy-cluster.sh --cluster $CLUSTER_NAME

      - name: Cleanup cluster state
        if: ${{ inputs.skipClusterInstall != 'true' }}
        uses: ./.github/actions/cleanup-cluster-state

  save_workflow_metadata:
    name: Save Workflow Metadata
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs:
      - initialize-globals
      - os419_teardown
      - os414_teardown
    if: always()

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log Workflow Start Time
        run: |
          echo "Workflow Start Time: ${{ needs.initialize-globals.outputs.start-time }}"

      - name: Commit workflow metadata to repository
        if: ${{ inputs.dryRun == 'false' || (inputs.dryRun == '' && inputs.skipClusterInstall == 'false') }}
        uses: ./.github/actions/commit-workflow-metadata
        with:
          workflow-start-time: ${{ needs.initialize-globals.outputs.start-time }}
          workflow-inputs: ${{ needs.initialize-globals.outputs.all-inputs }}
          github-token: ${{ secrets.ACCESS_TOKEN }}
